<launch>

    <!-- TODO: Decompose -->

    <!-- Sets mode: qualification, missions, demo or none -->
    <arg name="mode" default="missions" />

    <!-- Sets mode for drums mission: left, right, middle or none -->
    <arg name="drum_mission_direction_mode" default="left" />

    <!-- Sets distance to horizontal mat edge for drums mission -->
    <arg name="drum_mission_horizontal_edge_distance" default="-200" />

    <!-- Disables connection with STM32 -->
    <arg name="connectionDisabled" default="true" />

    <!-- Enables video streaming through network -->
    <arg name="stream" default="false" />

    <!-- Enables simulation mode (for simple simulator) -->
    <arg name="simulation" default="false" />

    <!-- Enables ueye camera -->
    <arg name="ueye_cam" default="false" />

    <!-- Enables GUI windows for debugging vision nodes -->
    <arg name="debugVision" default="false" />

    <!-- Enables video recording. Use 'storage' parameter to specify recorded video location. -->
    <arg name="record" default="false" />

    <!-- Root path for all output videos and images. MUST NOT END WITH SLASH!!!!!! -->
    <arg name="storage" />

    <node pkg="auv_vision" name="gate_locator" type="gate_locator" output="screen">
        <remap from="/cam_front_1/image_raw" to="/stereo/camera/right/image_raw" if="$(arg simulation)" />
        <param name="debugVision" value="$(arg debugVision)" />
    </node>

    <node pkg="auv_vision" name="drums_locator" type="drums_locator" output="screen">
        <remap from="/cam_front_1/image_raw" to="/stereo/camera/right/image_raw" if="$(arg simulation)" />
        <remap from="/cam_bottom/image_raw" to="/ROV_model_URDF/camera_bottom/image_raw" if="$(arg simulation)" />
        <param name="debugVision" value="$(arg debugVision)" />
    </node>

    <node pkg="auv_vision" name="tile_locator" type="tile_locator" output="screen">
        <remap from="/cam_bottom/image_raw" to="/ROV_model_URDF/camera_bottom/image_raw" if="$(arg simulation)" />
        <param name="debugVision" value="$(arg debugVision)" />
    </node>

<!--
    <node pkg="auv_vision" name="drums_locator" type="drums_locator" output="screen" />
    <node pkg="auv_vision" name="flare_locator" type="flare_locator" output="screen" />
-->

    <node pkg="auv_pilot" name="pilot" type="pilot" output="screen">
        <param name="simulation" value="$(arg simulation)" />
        <param name="velocityLevel1" value="3000.0" />
        <param name="velocityLevel2" value="7000.0" />
        <param name="velocityLevel3" value="1000.0" />
        <param name="velocityLevel4" value="13000.0" />
    </node>
        
    <group if="$(arg simulation)">
        <node pkg="auv_connection" name="gazebo_bridge" type="gazebo_bridge" output="screen" />
    </group>

    <group unless="$(arg simulation)">

        <group unless="$(arg connectionDisabled)">
            <node pkg="auv_connection" name="uart_bridge" type="uart_bridge" output="screen" />
            <node pkg="auv_connection" name="hardware_bridge" type="hardware_bridge" output="screen" />
        </group>

        <!-- First front camera -->
        <node name="cam_front_1" pkg="usb_cam" type="usb_cam_node" output="screen" respawn="true" >
            <param name="video_device" value="/dev/v4l/by-id/usb-3.0_USB_Camera_3.0_USB_Camera-video-index0" />
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="pixel_format" value="yuyv" />
            <param name="framerate" value="30" />
            <param name="camera_frame_id" value="cam_front_1" />
            <param name="camera_name" value="cam_front_1" />
            <param name="io_method" value="mmap"/>
        </node>

        <!-- Bottom camera -->
        <node name="cam_bottom" pkg="ueye_cam" type="usb_cam_node" output="screen" respawn="true">
            <param name="video_device" value="/dev/v4l/by-id/usb-Sonix_Technology_Co.__Ltd._H264_USB_Camera_SN0001-video-index0" />
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="frame_rate" value="30" />
        </node>

        <group if="$(arg ueye_cam)">

            <arg name="nodelet_manager_name" value="nodelet_manager" />
            <arg name="camera_name" value="cam_bottom" />

            <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager_name)" args="manager" output="screen" />

            <node pkg="nodelet" type="nodelet" name="ueye_cam_nodelet" args="load ueye_cam/ueye_cam_nodelet $(arg nodelet_manager_name)">
                <param name="camera_name" type="str" value="$(arg camera_name)" /> <!-- == namespace for topics and services -->
                <param name="camera_topic" type="str" value="image_raw" />
                <param name="camera_id" type="int" value="10" /> <!-- 0 = any camera; 1+: camera ID -->
                <!--param name="camera_intrinsics_file" type="string" value="" /--> <!-- default: ~/.ros/camera_info/<camera_name>.yaml -->
                <!--param name="camera_parameters_file" type="string" value="" /--> <!-- default: ~/.ros/camera_conf/<camera_name>.ini -->

                <param name="ext_trigger_mode" type="bool" value="False" /> <!-- if False, then camera will operate in free-run mode; otherwise, frames need to be triggered by hardware signal (falling-edge) on digital input pin of camera -->

                <!-- the following are optional camera configuration parameters:
                     they will be loaded on the camera after the .ini configuration
                     file, and before dynamic_reconfigure. That means that any
                     (lingering) dynamic parameters from dynamic_reconfigure will
                     override these values, and that these will override parameters
                     from the .ini file.
                     See http://www.ros.org/wiki/ueye_cam for more details. -->

                <param name="color_mode" type="str" value="rgb8" /> <!-- valid options: 'rgb8', 'mono8', 'bayer_rggb8' -->

                <!-- WARNING: the following 4 parameters specify dimensions for camera's area of interest. Values for image_width and image_height that are smaller than your camera's maximum values will result in cropped field of view. For typical cases, one should modify values for sensor_scaling / binning / subsampling to downsample the resulting ROS image to the desired dimensions, without losing potential field of view. -->
                <param name="image_width" type="int" value="640" />
                <param name="image_height" type="int" value="480" />
                <param name="image_top" type="int" value="-1" /> <!-- -1: center -->
                <param name="image_left" type="int" value="-1" /> <!-- -1: center -->

                <param name="auto_gain" type="bool" value="True" />
                <param name="master_gain" type="int" value="0" />
                <param name="red_gain" type="int" value="0" />
                <param name="green_gain" type="int" value="1" />
                <param name="blue_gain" type="int" value="16" />
                <param name="gain_boost" type="bool" value="False" />

                <param name="auto_exposure" type="bool" value="True" />
                <param name="exposure" type="int" value="33" /> <!-- in ms -->

                <param name="auto_white_balance" type="bool" value="True" />
                <param name="white_balance_red_offset" type="int" value="0" />
                <param name="white_balance_blue_offset" type="int" value="0" />

                <param name="auto_frame_rate" type="bool" value="False" />
                <param name="frame_rate" type="double" value="30.0" />
                <param name="output_rate" type="double" value="0.0" /> <!-- >0: throttle rate for publishing frames -->
                <param name="pixel_clock" type="int" value="25" />
            </node>
        </group>

        <!--TODO: Allow to record in simulation mode -->
        <group if="$(arg record)">
            <!-- First front camera recorder -->
            <!-- FPS in recorders are mostly empiric values! -->
            <node name="front_recorder_1" pkg="auv_vision" type="video_recorder" output="screen">
                <remap from="image" to="/cam_front_1/image_raw"/>
                <param name="fps" value="30" />
                <param name="codec" value="H264" />
                <param name="filename" value="$(arg storage)/front-1.avi" />
            </node>
            
            <!-- Bottom camera recorder -->
            <node name="bottom_recorder" pkg="auv_vision" type="video_recorder" output="screen">
                <remap from="image" to="/cam_bottom/image_raw"/>
                <param name="fps" value="30" />
                <param name="codec" value="H264" />
                <param name="filename" value="$(arg storage)/bottom.avi" />
            </node>
        </group>

    </group>

    <group if="$(arg stream)">
        <!-- Video web server -->
        <node name="video_server" pkg="web_video_server" type="web_video_server" output="screen" >
            <param name="server_threads" value="4" />
            <param name="ros_threads" value="10" />
        </node>
    </group>

    <node pkg="auv_pilot" name="top_level_fsm" type="top_level_fsm.py" output="screen">
        <param name="mode" value="$(arg mode)" />
        <param name="drum_mission_direction_mode" value="$(arg drum_mission_direction_mode)" />
        <param name="drum_mission_horizontal_edge_distance" value="$(arg drum_mission_horizontal_edge_distance)" />
        <param name="launch_delay" value="60" />
        <param name="dive_delay" value="20" />
        <param name="initial_depth" value="100" />
    </node>


</launch>
